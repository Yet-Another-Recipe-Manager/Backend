// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Recipe {
  id             String              @id @default(uuid())
  name           String
  description    String
  ingredients    IngredientSection[]
  steps          String
  pictures       File[]
  primaryPicture Int
  visibility     Visibility
  author         User                @relation(fields: [userId], references: [id])
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  userId         String
}

model IngredientSection {
  id          String       @id @default(uuid())
  name        String?
  ingredients Ingredient[]
  recipe      Recipe?      @relation(fields: [recipeId], references: [id])
  recipeId    String?
}

model Ingredient {
  id                  String             @id @default(uuid())
  name                String
  unit                String?
  amount              String
  IngredientSection   IngredientSection? @relation(fields: [ingredientSectionId], references: [id])
  ingredientSectionId String?
}

model User {
  id        String    @id @default(uuid())
  name      String    @unique
  email     String    @unique
  password  String
  role      Role
  status    Status    @default(INACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[]
  picture   File?     @relation(fields: [pictureid], references: [id])
  pictureid String?
  recipes   Recipe[]
}

model Session {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  hash      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
}

model File {
  id   String @id @default(uuid())
  path String

  user     User[]
  recipe   Recipe? @relation(fields: [recipeId], references: [id])
  recipeId String?
}

enum Role {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Visibility {
  PRIVATE
  INTERNAL
  PUBLIC
}
